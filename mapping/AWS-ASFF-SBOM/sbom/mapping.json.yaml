prefixes: 
  se_sec_vocab: "https://vocab.siemens-energy.com/cybersec/"
  se_sec_vocab_external_reference: "https://vocab.siemens-energy.com/cybersec/externalreference/"
  se_sec_vocab_component: "https://vocab.siemens-energy.com/cybersec/component/"
  se_sec_data: "https://data.siemens-energy.com/cybersec/"
  se_sec_data_bom: "https://data.siemens-energy.com/cybersec/bom/"
  se_sec_data_tool: "https://data.siemens-energy.com/cybersec/tool/"
  se_sec_data_org: "https://data.siemens-energy.com/cybersec/organization/"
  se_sec_data_external_reference: "https://data.siemens-energy.com/cybersec/externalreference/"
  se_sec_data_component: "https://data.siemens-energy.com/cybersec/component/"
  se_sec_data_license: "https://data.siemens-energy.com/cybersec/license/"
  schema: "https://schema.org/"
  rdfs: "http://www.w3.org/2000/01/rdf-schema#"

sources:
  bom-source: ['sbom.json~jsonpath', '$']
  tool-source: ['sbom.json~jsonpath', '$.metadata.tools[*]']
  tool-external-reference-source: ['sbom.json~jsonpath', '$.metadata.tools[*].externalReferences[*]']
  metadata-component-source: ['sbom.json~jsonpath', '$.metadata.component']
  component-licenses-source: ['sbom.json~jsonpath', '$.metadata.component.licenses[*]']
  components-source: ['sbom.json~jsonpath', '$.components[*]'] 
  component-external-reference-source: ['sbom.json~jsonpath', '$.components[*].externalReferences[*]']
  component-license-source: ['sbom.json~jsonpath', '$.components[*].licenses[*]']
  dependencies-source: ['sbom.json~jsonpath', '$.dependencies[*]']

mappings:
  BOM:
    sources:
      - bom-source
    s: se_sec_data_bom:$(serialNumber)
    po:
      - [a, se_sec_vocab:BOM]
      - p: rdfs:label
        o:
          value: $(serialNumber)
          datatype: xsd:string
      - p: se_sec_vocab:serialNumber # TODO: add logic to make sure it complies with regex from ontology
        o:
          value: $(serialNumber)
          datatype: xsd:string
      - p: schema:schemaVersion
        o:
          value: $($schema)
          datatype: xsd:anyURI
      - p: se_sec_vocab:specVersion
        o:
          value: $(specVersion)
          datatype: xsd:double
      - p: schema:version
        o:
          value: $(version)
          datatype: xsd:integer
      - p: schema:dateCreated
        o:
          value: $(metadata.timestamp)
          datatype: xsd:dateTimeStamp
      - p: se_sec_vocab:toolUsed
        o:
          mapping: Tools
          condition:
            function: equal
            parameters:
              - [str1, "$(metadata.tools.name)",s]
              - [str2, "$(name)",o]
      - p: se_sec_vocab:describes
        o:
          mapping: MetadataComponent
          condition:
            function: equal
            parameters:
              - [str1, "$(metadata.component.purl)",s]
              - [str2, "$(purl)",o]
      - p: se_sec_vocab:dependsOn
        o:
          mapping: Dependencies
          condition:
            function: equal
            parameters:
              - [str1, "$(dependencies.ref)",s]
              - [str2, "$(ref)",o]
    
  Tools:
    sources:
      - tool-source
    s: se_sec_data_tool:$(name)
    po:
      - [a, schema:SoftwareApplication]
      - p: schema:seller
        o: se_sec_data_org:$(vendor) # TODO: avoid special characters in URI? ("%20" for " ")
      - p: rdfs:label
        o:
          value: $(name)
          language: en
      - p: schema:softwareVersion
        o: 
          value: $(version)
          datatype: xsd:string
      - p: se_sec_vocab:externalReference
        o: 
          mapping: ToolExternalReference
          condition:
            function: equal
            parameters:
              - [str1, "$(url)",s]
              - [str2, "$(url)",o]

  ToolExternalReference:
    sources:
      - tool-external-reference-source
    s: se_sec_data_external_reference:$(url) # TODO: base+UUID instead of base+URL
    po:
      - [a, se_sec_vocab_external_reference:$(type)] # TODO: add logic to choose proper type
      - p: se_sec_vocab:url
        o: 
          value: $(url)
          datatype: xsd:anyURI
      - p: se_sec_vocab:comment
        o:
          value: $(comment)
          datatype: xsd:string

  MetadataComponent:
    sources:
      - metadata-component-source
    s: se_sec_data_component:$(purl)
    po:
      - [a, se_sec_vocab_component:$(type)] # TODO: add logic to choose proper type
      - p: se_sec_vocab:purl
        o: 
          value: $(purl)
          datatype: xsd:anyURI
      - p: rdfs:label
        o: 
          value: $(purl)
          datatype: xsd:string
      - p: se_sec_vocab:bom-ref
        o: 
          value: $(bom-ref)
          datatype: xsd:string
      - p: rdfs:label
        o: 
          value: $(name)
          datatype: xsd:string
      - p: se_sec_vocab:componentVersion
        o: 
          value: $(version)
          datatype: xsd:string

  Dependencies:
    sources:
      - dependencies-source
    s: se_sec_data_dependency:$(ref)
    po:
      - [a, se_sec_vocab:Dependency]
      - p: se_sec_vocab:source
        o:
          value: $(ref)
          datatype: xsd:anyURI
      - p: se_sec_vocab:target
        o:
          list: dependsOn
          value: $(this)
          datatype: xsd:anyURI
